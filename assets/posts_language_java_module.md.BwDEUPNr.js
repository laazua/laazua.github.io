import{_ as s,c as e,o as i,af as a}from"./chunks/framework.BKhkn9_V.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"posts/language/java/module.md","filePath":"posts/language/java/module.md"}'),d={name:"posts/language/java/module.md"};function l(n,t,o,p,r,h){return i(),e("div",null,[...t[0]||(t[0]=[a(`<h5 id="模块化编程" tabindex="-1">模块化编程 <a class="header-anchor" href="#模块化编程" aria-label="Permalink to “模块化编程”">​</a></h5><ul><li><strong>module-info.java</strong></li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">module</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.example.app {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    requires</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.example.api;                   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 普通依赖</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    requires</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> transitive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.sql;               </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 传递依赖</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    requires</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> static lombok;                     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 编译期依赖</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.example.app.api;                </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 导出包</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.example.app.internal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.example.test; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 仅导出给指定模块</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    opens</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.example.app.model;                </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 允许反射</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    opens</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.example.app.entity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> spring.core, jackson.databind; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 有选择地开放反射</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.example.api.HelloService;          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用服务接口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    provides</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.example.api.HelloService       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 提供服务实现</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.example.impl.HelloServiceImpl;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><strong>常用指令</strong></li></ul><table tabindex="0"><thead><tr><th>指令</th><th>作用</th><th>基本语法</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>module</code></td><td>定义模块名</td><td><code>module &lt;模块名&gt; { ... }</code></td><td>声明当前源代码属于哪个模块。模块名通常与包名类似（反向域名规则）。</td><td><code>module com.example.app {}</code></td></tr><tr><td><code>open module</code></td><td>定义<strong>开放模块</strong></td><td><code>open module &lt;模块名&gt; { ... }</code></td><td>将模块中的所有包都默认对<strong>反射访问</strong>开放（如 JSON 序列化、Spring、JPA 反射）。</td><td><code>open module com.example.model {}</code></td></tr><tr><td><code>requires</code></td><td>声明模块依赖</td><td><code>requires &lt;模块名&gt;;</code></td><td>表示当前模块依赖另一个模块的导出包。</td><td><code>requires com.example.api;</code></td></tr><tr><td><code>requires transitive</code></td><td>传递依赖</td><td><code>requires transitive &lt;模块名&gt;;</code></td><td>如果模块 A <code>requires transitive B</code>，那么依赖 A 的模块也自动依赖 B。</td><td><code>requires transitive java.sql;</code></td></tr><tr><td><code>requires static</code></td><td>可选依赖（编译时可用，运行时可缺失）</td><td><code>requires static &lt;模块名&gt;;</code></td><td>用于编译时引用但运行时非必须的模块（常见于注解或日志框架）。</td><td><code>requires static lombok;</code></td></tr><tr><td><code>exports</code></td><td>导出包（供其他模块使用）</td><td><code>exports &lt;包名&gt;;</code></td><td>允许其他模块访问该包内公开类。</td><td><code>exports com.example.api;</code></td></tr><tr><td><code>exports ... to</code></td><td>有选择地导出包</td><td><code>exports &lt;包名&gt; to &lt;模块名列表&gt;;</code></td><td>仅允许指定模块访问此包。</td><td><code>exports com.example.internal to com.example.test;</code></td></tr><tr><td><code>opens</code></td><td>打开包供反射访问</td><td><code>opens &lt;包名&gt;;</code></td><td>允许反射（如 <code>Class.forName()</code> 或 Jackson）访问该包内成员，但不等于 <code>exports</code>。</td><td><code>opens com.example.entity;</code></td></tr><tr><td><code>opens ... to</code></td><td>有选择地开放反射访问</td><td><code>opens &lt;包名&gt; to &lt;模块名列表&gt;;</code></td><td>仅对指定模块开放反射访问。</td><td><code>opens com.example.entity to spring.core,hibernate.core;</code></td></tr><tr><td><code>uses</code></td><td>声明当前模块使用某个服务接口</td><td><code>uses &lt;服务接口全名&gt;;</code></td><td>用于 <code>ServiceLoader</code> 发现服务实现。</td><td><code>uses com.example.api.HelloService;</code></td></tr><tr><td><code>provides ... with</code></td><td>注册服务实现</td><td><code>provides &lt;接口&gt; with &lt;实现类列表&gt;;</code></td><td>声明该模块提供某接口的实现。</td><td><code>provides com.example.api.HelloService with com.example.impl.HelloServiceImpl;</code></td></tr></tbody></table><ul><li><strong><a href="./module-code.html">封装示例</a></strong></li></ul>`,6)])])}const g=s(d,[["render",l]]);export{k as __pageData,g as default};
