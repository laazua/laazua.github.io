import{_ as d,c as o,o as e,af as r}from"./chunks/framework.BKhkn9_V.js";const i=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"posts/containerd/docker/base.md","filePath":"posts/containerd/docker/base.md"}'),c={name:"posts/containerd/docker/base.md"};function a(g,t,n,l,s,u){return e(),o("div",null,[...t[0]||(t[0]=[r('<h5 id="docker基础" tabindex="-1">Docker基础 <a class="header-anchor" href="#docker基础" aria-label="Permalink to “Docker基础”">​</a></h5><ul><li><strong>指令语法</strong></li></ul><blockquote><p>构建阶段</p></blockquote><table tabindex="0"><thead><tr><th>指令</th><th>语法</th><th>说明</th></tr></thead><tbody><tr><td><strong>FROM</strong></td><td><code>FROM &lt;image&gt;[:&lt;tag&gt;] [AS &lt;name&gt;]</code><br><code>FROM &lt;image&gt;@&lt;digest&gt; [AS &lt;name&gt;]</code></td><td>指定基础镜像，可命名为阶段别名以支持多阶段构建。</td></tr><tr><td><strong>ARG</strong></td><td><code>ARG &lt;name&gt;[=&lt;default&gt;]</code></td><td>定义构建时变量。若在 <code>FROM</code> 之前声明，可用于动态选择基础镜像。</td></tr><tr><td><strong>RUN</strong></td><td><code>RUN &lt;command&gt;</code> 或 <code>RUN [&quot;executable&quot;,&quot;param1&quot;,...]</code></td><td>执行命令并创建新层。建议使用 <code>&amp;&amp;</code> 合并命令并清理缓存文件。</td></tr><tr><td><strong>SHELL</strong></td><td><code>SHELL [&quot;executable&quot;,&quot;parameters&quot;]</code></td><td>定义 RUN、CMD、ENTRYPOINT 的默认 shell。Linux 默认 <code>/bin/sh -c</code>。</td></tr><tr><td><strong>ONBUILD</strong></td><td><code>ONBUILD &lt;INSTRUCTION&gt;</code></td><td>为派生镜像设置“触发指令”。仅在基础镜像被继承时触发。</td></tr><tr><td><strong>COPY</strong></td><td><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] [--from=&lt;stage&gt;] &lt;src&gt;... &lt;dest&gt;</code></td><td>从构建上下文或其他阶段复制文件。<code>--from</code> 可跨阶段取文件。</td></tr><tr><td><strong>ADD</strong></td><td><code>ADD [--chown=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;... &lt;dest&gt;</code></td><td>功能类似 COPY，但支持压缩包自动解压及远程 URL 下载。</td></tr><tr><td><strong>LABEL</strong></td><td><code>LABEL &lt;key&gt;=&lt;value&gt; [&lt;key&gt;=&lt;value&gt; ...]</code></td><td>添加元数据（镜像作者、版本、描述等）。取代旧版 <code>MAINTAINER</code>。</td></tr><tr><td><strong>MAINTAINER</strong></td><td><code>MAINTAINER &lt;name&gt;</code></td><td>已废弃，建议使用 <code>LABEL maintainer=...</code> 替代。</td></tr></tbody></table><blockquote><p>上下文配置</p></blockquote><table tabindex="0"><thead><tr><th>指令</th><th>语法</th><th>说明</th></tr></thead><tbody><tr><td><strong>ENV</strong></td><td><code>ENV &lt;key&gt;=&lt;value&gt; [&lt;key&gt;=&lt;value&gt; ...]</code></td><td>设置环境变量。可用于后续指令与容器运行时。</td></tr><tr><td><strong>WORKDIR</strong></td><td><code>WORKDIR &lt;path&gt;</code></td><td>设置工作目录，不存在时自动创建。支持多次嵌套使用。</td></tr><tr><td><strong>USER</strong></td><td><code>USER &lt;user&gt;[:&lt;group&gt;]</code> 或 <code>USER &lt;uid&gt;[:&lt;gid&gt;]</code></td><td>指定后续命令与容器运行时使用的用户。</td></tr><tr><td><strong>VOLUME</strong></td><td><code>VOLUME [&quot;/path&quot;]</code> 或 <code>VOLUME &lt;path&gt;</code></td><td>声明挂载点（数据卷）。容器运行时自动创建卷。</td></tr><tr><td><strong>EXPOSE</strong></td><td><code>EXPOSE &lt;port&gt;[/&lt;protocol&gt;]</code></td><td>声明容器监听的端口（仅文档用途，不实际绑定）。</td></tr><tr><td><strong>ARG</strong></td><td><code>ARG &lt;name&gt;[=&lt;default&gt;]</code></td><td>构建时变量，也可用于条件性控制逻辑。</td></tr><tr><td><strong>STOPSIGNAL</strong></td><td><code>STOPSIGNAL &lt;signal&gt;</code></td><td>设置容器接收停止请求时使用的信号（如 <code>SIGTERM</code>）。</td></tr></tbody></table><blockquote><p>运行时行为</p></blockquote><table tabindex="0"><thead><tr><th>指令</th><th>语法</th><th>说明</th></tr></thead><tbody><tr><td><strong>CMD</strong></td><td><code>CMD [&quot;executable&quot;,&quot;param1&quot;,...]</code><br><code>CMD [&quot;param1&quot;,...]</code><br><code>CMD command param1</code></td><td>定义容器启动时默认命令或参数。仅最后一个 CMD 生效。</td></tr><tr><td><strong>ENTRYPOINT</strong></td><td><code>ENTRYPOINT [&quot;executable&quot;,&quot;param1&quot;,...]</code><br><code>ENTRYPOINT command param1</code></td><td>设置容器主命令。可与 CMD 联合使用（CMD 提供默认参数）。</td></tr><tr><td><strong>HEALTHCHECK</strong></td><td><code>HEALTHCHECK [OPTIONS] CMD &lt;command&gt;</code><br><code>HEALTHCHECK NONE</code></td><td>设置健康检查命令。<code>OPTIONS</code> 支持：<br>• <code>--interval=&lt;duration&gt;</code><br>• <code>--timeout=&lt;duration&gt;</code><br>• <code>--start-period=&lt;duration&gt;</code><br>• <code>--retries=&lt;n&gt;</code></td></tr><tr><td><strong>STOP SIGNAL</strong></td><td><code>STOPSIGNAL SIGTERM</code></td><td>定义容器终止信号（默认 SIGTERM）。</td></tr><tr><td><strong>SHELL</strong></td><td><code>SHELL [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</code></td><td>定义容器内部默认命令解释器。</td></tr></tbody></table>',8)])])}const m=d(c,[["render",a]]);export{i as __pageData,m as default};
